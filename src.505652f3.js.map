{"version":3,"sources":["src/gl/shader.js","node_modules/gl-matrix/esm/common.js","node_modules/gl-matrix/esm/mat2.js","node_modules/gl-matrix/esm/mat2d.js","node_modules/gl-matrix/esm/mat3.js","node_modules/gl-matrix/esm/mat4.js","node_modules/gl-matrix/esm/vec3.js","node_modules/gl-matrix/esm/vec4.js","node_modules/gl-matrix/esm/quat.js","node_modules/gl-matrix/esm/quat2.js","node_modules/gl-matrix/esm/vec2.js","node_modules/gl-matrix/esm/index.js","src/gl/draw.js","src/key_press.js","src/objects/cube.js","src/objects/filled_space.js","src/objects/tetris_blocks/line_cube.js","src/objects/line_space.js","src/objects/rainbow.js","src/objects/space.js","src/gl/buffers.js","src/objects/tetris_blocks/jblock.js","src/objects/tetris_blocks/iblock.js","src/objects/tetris_blocks/sblock.js","src/objects/tetris_blocks/tblock.js","src/objects/tetris_blocks/oblock.js","src/world.js","src/index.js"],"names":["vsSource","fsSource","loadShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","deleteShader","initShaderProgram","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","setMatrixArrayType","degree","PI","toRadian","a","equals","b","abs","max","hypot","y","i","arguments","length","sqrt","create","out","glMatrix","clone","copy","identity","fromValues","m00","m01","m10","m11","set","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","s","sin","c","cos","scale","v","v0","v1","fromRotation","fromScaling","str","frob","LDU","L","D","U","add","subtract","exactEquals","multiplyScalar","multiplyScalarAndAdd","mul","sub","d","tx","ty","aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","translate","fromTranslation","fromMat4","m02","m12","m20","m21","m22","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","b00","b02","b10","b12","b20","b22","x","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","a6","a7","a8","b6","b7","b8","m03","m13","m23","m30","m31","m32","m33","axis","t","len","rotateX","rotateY","rotateZ","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspectiveNO","fovy","aspect","f","tan","Infinity","perspective","perspectiveZO","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","orthoNO","lr","bt","ortho","orthoZO","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","a9","a14","a15","b9","b13","b14","b15","divide","ceil","floor","min","round","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","r","zScale","transformMat4","m","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","p","angle","mag","cosine","acos","zero","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","l","u","A","B","C","E","F","G","H","I","J","v2","v3","v4","s1","s2","ix","iy","iz","iw","setAxisAngle","getAxisAngle","out_axis","getAngle","dotproduct","calculateW","exp","et","ln","atan2","log","pow","slerp","omega","cosom","sinom","scale0","scale1","u1","u2","u3","sqrt1MinusU1","sqrtU1","invDot","conjugate","fromMat3","fRoot","fTrace","j","k","fromEuler","halfToRad","cx","cy","cz","vec4","rotationTo","tmpvec3","vec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","mat3","view","dq","w1","fromRotationTranslationValues","outer","quat","mat4","getReal","getDual","setReal","setDual","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","mt","sqlen","a_dot_b","transformMat2","transformMat2d","p0","p1","sinC","cosC","require","projectionMatrix","cameraPosition","zAxis","yAxis","xAxis","modelViewMatrix","fieldOfView","zNear","zFar","updatePerspectiveMatrix","clearDrawing","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","drawObject","programInfo","buffers","transformMatrix","FLOAT","bindBuffer","ARRAY_BUFFER","position","vertexAttribPointer","attribLocations","vertexPosition","enableVertexAttribArray","color","vertexColor","useProgram","program","uniformMatrix4fv","uniformLocations","UNSIGNED_SHORT","linesOnly","drawArrays","LINES","vertexCount","ELEMENT_ARRAY_BUFFER","indices","drawElements","TRIANGLES","rotationMatrix","axisX","axisY","translateX","translateY","translateZ","rotationStep","validatedRotationMatrix","validatedTranslationVector","validatedTransformMatrix","translationVector","getOffsetTransform","spaceSize","offsetTransform","resetPosition","checkKeyDown","e","world","tempMatrix","keyCode","moveDown","reset","validateTransform","isDown","blockPosition","objectOffset","space","object","blockIdx","getBlockIdx","getUnvalidatedTransform","push","tryMoveDown","getTransform","setRandomObject","initBuffers","objectCanMove","positions_length","positions","Cube","colors","getNewPositions","newPositions","getNewIndices","newIndices","getNewVertexCount","FilledSpace","rainbow","LineCube","getVertexCount","arrayEquals","isArray","every","val","index","getSharedFaces","front","hasFront","hasTop","hasRight","sharedLines","sharedCount","some","includes","LineSpace","getRainbow","numColors","X","RGB","value","RGB_list","Space","zCube","fill","filled","lineSpace","filledSpace","transform","element","movingObject","checkIsOutsideSpace","checkSpaceIsFilled","row","splice","unshift","accumulator","fillSpace","removeIfLayerFilled","objectEndMove","update","initSpaceBuffers","getPositions","positionBuffer","createBuffer","bufferData","STATIC_DRAW","getColors","colorBuffer","initObjectBuffers","indexBuffer","getIndices","Uint16Array","updateBuffers","buffer","jBlockIdx","jBlockShared","jBlockSharedCount","jBlockSharedLines","jBlockPositions","jBlockIndices","jBlockVertexCount","jBlock","iBlockIdx","iBlockShared","iBlockSharedCount","iBlockSharedLines","iBlockPositions","iBlockIndices","iBlockVertexCount","iBlock","sBlockIdx","sBlockShared","sBlockSharedCount","sBlockSharedLines","sBlockPositions","sBlockIndices","sBlockVertexCount","sBlock","tBlockIdx","tBlockShared","tBlockSharedCount","tBlockSharedLines","tBlockPositions","tBlockIndices","tBlockVertexCount","tBlock","oBlockIdx","oBlockShared","oBlockSharedCount","oBlockSharedLines","oBlockPositions","oBlockIndices","oBlockVertexCount","oBlock","World","s_block","t_block","o_block","j_block","i_block","possibleObjects","timeout","window","setTimeout","startTimeout","objectBuffers","spaceBuffers","spaceLineBuffers","spaceFilledBuffers","main","document","querySelector","getContext","canvas","clientWidth","clientHeight","getAttribLocation","getUniformLocation","spaceTransform","getCentralizeTransform","spaceObjectsTransform","getCentralizeObjectsTransform","then","addEventListener","totalTime","requestAnimationFrame","render","now","deltaTime"],"mappings":"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AA,KAEK2H,EAAmB,GAgM/B,QAAA,iBAAA,EA/LD,IAAMC,EAAY,EAEf,IACA,GACD,GACA,IACC,GACD,GACA,GACA,GACA,IACC,GACD,GACA,IAGC,IACA,IACA,IACA,GACD,IACC,GACD,GACA,IACC,GACD,IACC,IACA,IAGA,GACD,IACC,IACA,GACD,GACA,GACA,GACA,GACA,GACA,GACA,IACC,IAGA,IACA,IACA,GACD,IACC,IACA,GACD,IACC,GACD,IACC,IACA,GACD,GAGA,IACC,IACA,GACD,GACA,IACC,GACD,GACA,GACA,GACA,IACC,GACD,IAGC,IACA,IACA,IACA,IACA,GACD,IACC,GACD,GACA,IACC,GACD,IACC,IAOGzC,EAAU,CACd,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAGWF,EAAc,GA8D1B,QAAA,YAAA,EA5DoB4C,IAAAA,EAAAA,WACnB,SAAYtD,EAAAA,GAAO,EAAA,KAAA,GACjB,KAAKA,MAAQA,EA0DhB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,YAvDC,MAAA,WAEE,IADA,IAAIuD,EAAS,GACJ5gB,EAAI,EAAGA,EAAIygB,EAAkBzgB,IACpC4gB,EAAOT,KAAK,KAAK9C,MAAM,GAAI,KAAKA,MAAM,GAAI,KAAKA,MAAM,GAAI,KAAKA,MAAM,IAEtE,OAAOuD,IAkDV,CAAA,IAAA,YA/CC,MAAA,WACE,OAAO,IA8CV,CAAA,IAAA,eA3CC,MAAA,WACE,OAAOF,IA0CV,CAAA,IAAA,aAvCC,MAAA,WACE,OAAOzC,IAsCV,CAAA,IAAA,iBApCC,MAAA,WACE,OAAOF,IAmCV,CAAA,IAAA,cAjCC,MAAA,WACE,MAAO,CAAC,CAAC,EAAG,EAAG,QAgClB,EA5DoB4C,GAgCd,SAASE,EAAgBb,GAK9B,IAJA,IACIla,EACA/F,EACAmG,EAHA4a,EAAe,GAIV9gB,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","file":"src.505652f3.js","sourceRoot":"..","sourcesContent":["const vsSource = `\r\n  attribute vec4 aVertexPosition;\r\n  attribute vec4 aVertexColor;\r\n\r\n  uniform mat4 uModelViewMatrix;\r\n  uniform mat4 uProjectionMatrix;\r\n  uniform mat4 uTransformMatrix;\r\n\r\n  varying lowp vec4 vColor;\r\n\r\n  void main(void) {\r\n    gl_Position = uProjectionMatrix * uModelViewMatrix * uTransformMatrix * aVertexPosition;\r\n    vColor = aVertexColor;\r\n  }\r\n`;\r\n\r\n// Fragment shader program\r\n\r\nconst fsSource = `\r\n  varying lowp vec4 vColor;\r\n\r\n  void main(void) {\r\n    gl_FragColor = vColor;\r\n  }\r\n`;\r\n\r\n//\r\n// creates a shader of the given type, uploads the source and\r\n// compiles it.\r\n//\r\nfunction loadShader(gl, type, source) {\r\n  const shader = gl.createShader(type);\r\n\r\n  // Send the source to the shader object\r\n\r\n  gl.shaderSource(shader, source);\r\n\r\n  // Compile the shader program\r\n\r\n  gl.compileShader(shader);\r\n\r\n  // See if it compiled successfully\r\n\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    alert(\r\n      \"An error occurred compiling the shaders: \" + gl.getShaderInfoLog(shader)\r\n    );\r\n    gl.deleteShader(shader);\r\n    return null;\r\n  }\r\n\r\n  return shader;\r\n}\r\n\r\n//\r\n// Initialize a shader program, so WebGL knows how to draw our data\r\n//\r\nexport default function initShaderProgram(gl) {\r\n  const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\r\n  const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n\r\n  // Create the shader program\r\n\r\n  const shaderProgram = gl.createProgram();\r\n  gl.attachShader(shaderProgram, vertexShader);\r\n  gl.attachShader(shaderProgram, fragmentShader);\r\n  gl.linkProgram(shaderProgram);\r\n\r\n  // If creating the shader program failed, alert\r\n\r\n  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n    alert(\r\n      \"Unable to initialize the shader program: \" +\r\n        gl.getProgramInfoLog(shaderProgram)\r\n    );\r\n    return null;\r\n  }\r\n\r\n  return shaderProgram;\r\n}\r\n","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 2x2 Matrix\n * @module mat2\n */\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\n * Calculates the determinant of a mat2\n *\n * @param {ReadonlyMat2} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat2} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\n * Returns a string representation of a mat2\n *\n * @param {ReadonlyMat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3]);\n}\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {ReadonlyMat2} L the lower triangular matrix\n * @param {ReadonlyMat2} D the diagonal matrix\n * @param {ReadonlyMat2} U the upper triangular matrix\n * @param {ReadonlyMat2} a the input matrix to factorize\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat2} a The first matrix.\n * @param {ReadonlyMat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat2} a The first matrix.\n * @param {ReadonlyMat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 2x3 Matrix\n * @module mat2d\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, b,\n *  c, d,\n *  tx, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, b, 0,\n *  c, d, 0,\n *  tx, ty, 1]\n * </pre>\n * The last column is ignored so the array is shorter and operations are faster.\n */\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {ReadonlyMat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {mat2d} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {mat2d} out\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to translate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to translate\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat2d} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat2d} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\n * Returns a string representation of a mat2d\n *\n * @param {ReadonlyMat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat2d(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\n}\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat2d} a The first matrix.\n * @param {ReadonlyMat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat2d} a The first matrix.\n * @param {ReadonlyMat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\n * Dual Quaternion<br>\n * Format: [real, dual]<br>\n * Quaternion format: XYZW<br>\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\n * @module quat2\n */\n\n/**\n * Creates a new identity dual quat\n *\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat2} a dual quaternion to clone\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\n * Creates a new dual quat initialized with the given values\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\n * Creates a new dual quat from the given values (quat and translation)\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component (translation)\n * @param {Number} y2 Y component (translation)\n * @param {Number} z2 Z component (translation)\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\n * Creates a dual quat from a quaternion and a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q a normalized quaternion\n * @param {ReadonlyVec3} t tranlation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Creates a dual quat from a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyVec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\n * Creates a dual quat from a quaternion\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q the quaternion\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\n * Creates a new dual quat from a matrix (4x4)\n *\n * @param {quat2} out the dual quaternion\n * @param {ReadonlyMat4} a the matrix\n * @returns {quat2} dual quat receiving operation result\n * @function\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\n * Copy the values from one dual quat to another\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the source dual quaternion\n * @returns {quat2} out\n * @function\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\n * Set a dual quat to the identity dual quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @returns {quat2} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\n * Set the components of a dual quat to the given values\n *\n * @param {quat2} out the receiving quaternion\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} out\n * @function\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\n * Gets the real part of a dual quat\n * @param  {quat} out real part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} real part\n */\n\nexport var getReal = quat.copy;\n/**\n * Gets the dual part of a dual quat\n * @param  {quat} out dual part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} dual part\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\n * Set the real component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the real part\n * @returns {quat2} out\n * @function\n */\n\nexport var setReal = quat.copy;\n/**\n * Set the dual component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the dual part\n * @returns {quat2} out\n * @function\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\n * Gets the translation of a normalized dual quat\n * @param  {vec3} out translation\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\n * @return {vec3} translation\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\n * Translates a dual quat by the given vector\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {quat2} out\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\n * Rotates a dual quat around the X axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around the Y axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around the Z axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat by a given quaternion (a * q)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @returns {quat2} out\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\n * Rotates a dual quat by a given quaternion (q * a)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @returns {quat2} out\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around a given axis. Does the normalisation automatically\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @param {Number} rad how far the rotation should be\n * @returns {quat2} out\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Adds two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n * @function\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\n * Multiplies two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\n * Alias for {@link quat2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a dual quat by a scalar number\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the dual quat to scale\n * @param {Number} b amount to scale the dual quat by\n * @returns {quat2} out\n * @function\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\n *\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = quat.dot;\n/**\n * Performs a linear interpolation between two dual quats's\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\n * @returns {quat2} out\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\n * Calculates the conjugate of a dual quat\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\n * @returns {quat2} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\n * Calculates the length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate length of\n * @returns {Number} length of a\n * @function\n */\n\nexport var length = quat.length;\n/**\n * Alias for {@link quat2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\n * Alias for {@link quat2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a dual quat\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quaternion to normalize\n * @returns {quat2} out\n * @function\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\n * Returns a string representation of a dual quatenion\n *\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\n * @returns {String} string representation of the dual quat\n */\n\nexport function str(a) {\n  return \"quat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \")\";\n}\n/**\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat2} a the first dual quaternion.\n * @param {ReadonlyQuat2} b the second dual quaternion.\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat2} a the first dual quat.\n * @param {ReadonlyQuat2} b the second dual quat.\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat2 from \"./mat2.js\";\nimport * as mat2d from \"./mat2d.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as mat4 from \"./mat4.js\";\nimport * as quat from \"./quat.js\";\nimport * as quat2 from \"./quat2.js\";\nimport * as vec2 from \"./vec2.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","const { mat4, vec3 } = require(\"gl-matrix\");\r\n\r\nconst projectionMatrix = mat4.create();\r\n\r\nfunction lookAt(cameraPosition, target, up) {\r\n  var zAxis = vec3.create();\r\n  var yAxis = vec3.create();\r\n  var xAxis = vec3.create();\r\n  vec3.normalize(zAxis, vec3.sub(zAxis, cameraPosition, target));\r\n  vec3.normalize(xAxis, vec3.cross(xAxis, up, zAxis));\r\n  vec3.normalize(yAxis, vec3.cross(yAxis, zAxis, xAxis));\r\n\r\n  return mat4.fromValues(\r\n    xAxis[0],\r\n    xAxis[1],\r\n    xAxis[2],\r\n    0,\r\n    yAxis[0],\r\n    yAxis[1],\r\n    yAxis[2],\r\n    0,\r\n    zAxis[0],\r\n    zAxis[1],\r\n    zAxis[2],\r\n    0,\r\n    cameraPosition[0],\r\n    cameraPosition[1],\r\n    cameraPosition[2],\r\n    1\r\n  );\r\n}\r\n\r\nconst cameraPosition = vec3.fromValues(0, 0, -5);\r\nconst target = vec3.fromValues(0, 0, 0);\r\nconst up = vec3.fromValues(0, 1, 0);\r\nconst modelViewMatrix = lookAt(cameraPosition, target, up); // camera\r\n\r\nconst fieldOfView = (60 * Math.PI) / 180;\r\nconst zNear = 0.1;\r\nconst zFar = 100.0;\r\n\r\nexport function updatePerspectiveMatrix(aspect) {\r\n  // Update the perspective matrix, a special matrix that is\r\n  // used to simulate the distortion of perspective in a camera.\r\n  // Our field of view is 45 degrees, with a width/height\r\n  // ratio that matches the display size of the canvas\r\n  // and we only want to see objects between 0.1 units\r\n  // and 100 units away from the camera.\r\n  // note: glmatrix.js always has the first argument\r\n  // as the destination to receive the result.\r\n  mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n}\r\n\r\nexport function clearDrawing(gl) {\r\n  gl.clearColor(0.0, 0.0, 0.0, 1.0); // Clear to black, fully opaque\r\n  gl.clearDepth(1.0); // Clear everything\r\n  gl.enable(gl.DEPTH_TEST); // Enable depth testing\r\n  gl.depthFunc(gl.LEQUAL); // Near things obscure far things\r\n\r\n  // Clear the canvas before we start drawing on it.\r\n\r\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n}\r\n\r\nexport function drawObject(gl, programInfo, buffers, transformMatrix) {\r\n  // Tell WebGL how to pull out the positions from the position\r\n  // buffer into the vertexPosition attribute\r\n  {\r\n    const numComponents = 3;\r\n    const type = gl.FLOAT;\r\n    const normalize = false;\r\n    const stride = 0;\r\n    const offset = 0;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n    gl.vertexAttribPointer(\r\n      programInfo.attribLocations.vertexPosition,\r\n      numComponents,\r\n      type,\r\n      normalize,\r\n      stride,\r\n      offset\r\n    );\r\n    gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition);\r\n  }\r\n\r\n  // Tell WebGL how to pull out the colors from the color buffer\r\n  // into the vertexColor attribute.\r\n  {\r\n    const numComponents = 4;\r\n    const type = gl.FLOAT;\r\n    const normalize = false;\r\n    const stride = 0;\r\n    const offset = 0;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.color);\r\n    gl.vertexAttribPointer(\r\n      programInfo.attribLocations.vertexColor,\r\n      numComponents,\r\n      type,\r\n      normalize,\r\n      stride,\r\n      offset\r\n    );\r\n    gl.enableVertexAttribArray(programInfo.attribLocations.vertexColor);\r\n  }\r\n\r\n  // Tell WebGL to use our program when drawing\r\n  gl.useProgram(programInfo.program);\r\n\r\n  // Set the shader uniforms\r\n  gl.uniformMatrix4fv(\r\n    programInfo.uniformLocations.projectionMatrix,\r\n    false,\r\n    projectionMatrix\r\n  );\r\n  gl.uniformMatrix4fv(\r\n    programInfo.uniformLocations.modelViewMatrix,\r\n    false,\r\n    modelViewMatrix\r\n  );\r\n  gl.uniformMatrix4fv(\r\n    programInfo.uniformLocations.transformMatrix,\r\n    false,\r\n    transformMatrix\r\n  );\r\n\r\n  const type = gl.UNSIGNED_SHORT;\r\n  const offset = 0;\r\n  if (buffers.linesOnly) {\r\n    gl.drawArrays(gl.LINES, offset, buffers.vertexCount);\r\n  } else {\r\n    // Tell WebGL which indices to use to index the vertices\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\r\n    gl.drawElements(gl.TRIANGLES, buffers.vertexCount, type, offset);\r\n  }\r\n}\r\n","const { mat4, vec3 } = require(\"gl-matrix\");\r\n\r\nvar rotationMatrix = mat4.create();\r\nvar axisX = vec3.fromValues(1, 0, 0);\r\nvar axisY = vec3.fromValues(0, 1, 0);\r\nvar translateX = vec3.fromValues(1, 0, 0);\r\nvar translateY = vec3.fromValues(0, 1, 0);\r\nvar translateZ = vec3.fromValues(0, 0, 1);\r\nvar rotationStep = Math.PI / 2;\r\n\r\nvar validatedRotationMatrix = mat4.create();\r\nvar validatedTranslationVector = vec3.fromValues(0, 0, 0);\r\n\r\nvar transformMatrix = mat4.create();\r\nvar validatedTransformMatrix = mat4.create();\r\n\r\nvar translationVector = vec3.fromValues(0, 0, 0);\r\n\r\nexport function getOffsetTransform(spaceSize) {\r\n  var offsetTransform = mat4.create();\r\n  mat4.translate(offsetTransform, offsetTransform, [\r\n    0.5 - 0.5 * (spaceSize.x % 2), // 0.5 if even\r\n    0.5 - 0.5 * (spaceSize.y % 2), // 0.5 if even\r\n    0\r\n  ]);\r\n  return offsetTransform;\r\n}\r\n\r\nfunction resetPosition() {\r\n  rotationMatrix = mat4.create();\r\n  translationVector = vec3.fromValues(0, 0, 0);\r\n  validatedRotationMatrix = mat4.create();\r\n  validatedTranslationVector = vec3.fromValues(0, 0, 0);\r\n}\r\n\r\nexport function checkKeyDown(e, world) {\r\n  var tempMatrix = mat4.create();\r\n  switch (e.keyCode) {\r\n    case 67: // C ie go down\r\n      moveDown(world);\r\n      return;\r\n    case 82: // Reset\r\n      resetPosition();\r\n      world.reset();\r\n      break;\r\n    case 37: // left arrow key\r\n      mat4.rotate(tempMatrix, tempMatrix, -rotationStep, axisY);\r\n      mat4.mul(rotationMatrix, tempMatrix, rotationMatrix);\r\n      break;\r\n    case 38: // up arrow key\r\n      mat4.rotate(tempMatrix, tempMatrix, rotationStep, axisX);\r\n      mat4.mul(rotationMatrix, tempMatrix, rotationMatrix);\r\n      break;\r\n    case 39: // right arrow key\r\n      mat4.rotate(tempMatrix, tempMatrix, rotationStep, axisY);\r\n      mat4.mul(rotationMatrix, tempMatrix, rotationMatrix);\r\n      break;\r\n    case 40: // down arrow key\r\n      mat4.rotate(tempMatrix, tempMatrix, -rotationStep, axisX);\r\n      mat4.mul(rotationMatrix, tempMatrix, rotationMatrix);\r\n      break;\r\n    case 87: // W\r\n      vec3.add(translationVector, translationVector, translateY);\r\n      break;\r\n    case 65: // A,\r\n      vec3.add(translationVector, translationVector, translateX);\r\n      break;\r\n    case 83: // S\r\n      vec3.sub(translationVector, translationVector, translateY);\r\n      break;\r\n    case 68: // D\r\n      vec3.sub(translationVector, translationVector, translateX);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  validateTransform(world, false);\r\n}\r\n\r\nexport function moveDown(world) {\r\n  vec3.add(translationVector, translationVector, translateZ);\r\n  validateTransform(world, true);\r\n}\r\n\r\nfunction validateTransform(world, isDown) {\r\n  const objectOffset = world.space.objectOffset;\r\n  const object = [];\r\n  const blockIdx = world.object.getBlockIdx();\r\n  var blockPosition;\r\n  for (let i = 0; i < blockIdx.length; i++) {\r\n    blockPosition = vec3.fromValues(\r\n      blockIdx[i][0],\r\n      blockIdx[i][1],\r\n      blockIdx[i][2]\r\n    );\r\n    vec3.transformMat4(blockPosition, blockPosition, getUnvalidatedTransform());\r\n    vec3.add(blockPosition, blockPosition, objectOffset);\r\n    vec3.round(blockPosition, blockPosition);\r\n    object.push(blockPosition);\r\n  }\r\n  if (isDown) {\r\n    if (!world.space.tryMoveDown(object)) {\r\n      if (mat4.equals(getTransform(), mat4.create())) {\r\n        world.reset();\r\n        return;\r\n      }\r\n      world.setRandomObject();\r\n      world.initBuffers();\r\n      resetPosition();\r\n      return;\r\n    }\r\n  }\r\n  const validated = world.space.objectCanMove(object);\r\n  if (validated) {\r\n    mat4.copy(validatedRotationMatrix, rotationMatrix);\r\n    mat4.copy(validatedTranslationVector, translationVector);\r\n  } else {\r\n    mat4.copy(rotationMatrix, validatedRotationMatrix);\r\n    mat4.copy(translationVector, validatedTranslationVector);\r\n  }\r\n}\r\n\r\nfunction getUnvalidatedTransform() {\r\n  mat4.translate(transformMatrix, mat4.create(), translationVector);\r\n  mat4.mul(transformMatrix, transformMatrix, rotationMatrix);\r\n  return transformMatrix;\r\n}\r\n\r\nexport default function getTransform() {\r\n  mat4.translate(\r\n    validatedTransformMatrix,\r\n    mat4.create(),\r\n    validatedTranslationVector\r\n  );\r\n  mat4.mul(\r\n    validatedTransformMatrix,\r\n    validatedTransformMatrix,\r\n    validatedRotationMatrix\r\n  );\r\n  return validatedTransformMatrix;\r\n}\r\n","const { mat4 } = require(\"gl-matrix\");\r\n\r\nexport const positions_length = 24;\r\nconst positions = [\r\n  // Front face\r\n  -0.5,\r\n  -0.5,\r\n  0.5,\r\n  0.5,\r\n  -0.5,\r\n  0.5,\r\n  0.5,\r\n  0.5,\r\n  0.5,\r\n  -0.5,\r\n  0.5,\r\n  0.5,\r\n\r\n  // Back face\r\n  -0.5,\r\n  -0.5,\r\n  -0.5,\r\n  -0.5,\r\n  0.5,\r\n  -0.5,\r\n  0.5,\r\n  0.5,\r\n  -0.5,\r\n  0.5,\r\n  -0.5,\r\n  -0.5,\r\n\r\n  // Top face\r\n  -0.5,\r\n  0.5,\r\n  -0.5,\r\n  -0.5,\r\n  0.5,\r\n  0.5,\r\n  0.5,\r\n  0.5,\r\n  0.5,\r\n  0.5,\r\n  0.5,\r\n  -0.5,\r\n\r\n  // Bottom face\r\n  -0.5,\r\n  -0.5,\r\n  -0.5,\r\n  0.5,\r\n  -0.5,\r\n  -0.5,\r\n  0.5,\r\n  -0.5,\r\n  0.5,\r\n  -0.5,\r\n  -0.5,\r\n  0.5,\r\n\r\n  // Right face\r\n  0.5,\r\n  -0.5,\r\n  -0.5,\r\n  0.5,\r\n  0.5,\r\n  -0.5,\r\n  0.5,\r\n  0.5,\r\n  0.5,\r\n  0.5,\r\n  -0.5,\r\n  0.5,\r\n\r\n  // Left face\r\n  -0.5,\r\n  -0.5,\r\n  -0.5,\r\n  -0.5,\r\n  -0.5,\r\n  0.5,\r\n  -0.5,\r\n  0.5,\r\n  0.5,\r\n  -0.5,\r\n  0.5,\r\n  -0.5\r\n];\r\n\r\n// This array defines each face as two triangles, using the\r\n// indices into the vertex array to specify each triangle's\r\n// position.\r\n\r\nconst indices = [\r\n  0,\r\n  1,\r\n  2,\r\n  0,\r\n  2,\r\n  3, // front\r\n  4,\r\n  5,\r\n  6,\r\n  4,\r\n  6,\r\n  7, // back\r\n  8,\r\n  9,\r\n  10,\r\n  8,\r\n  10,\r\n  11, // top\r\n  12,\r\n  13,\r\n  14,\r\n  12,\r\n  14,\r\n  15, // bottom\r\n  16,\r\n  17,\r\n  18,\r\n  16,\r\n  18,\r\n  19, // right\r\n  20,\r\n  21,\r\n  22,\r\n  20,\r\n  22,\r\n  23 // left\r\n];\r\n\r\nexport const vertexCount = 36;\r\n\r\nexport default class Cube {\r\n  constructor(color) {\r\n    this.color = color;\r\n  }\r\n\r\n  getColors() {\r\n    var colors = [];\r\n    for (let i = 0; i < positions_length; i++) {\r\n      colors.push(this.color[0], this.color[1], this.color[2], this.color[3]);\r\n    }\r\n    return colors;\r\n  }\r\n\r\n  linesOnly() {\r\n    return false;\r\n  }\r\n\r\n  getPositions() {\r\n    return positions;\r\n  }\r\n\r\n  getIndices() {\r\n    return indices;\r\n  }\r\n  getVertexCount() {\r\n    return vertexCount;\r\n  }\r\n  getBlockIdx() {\r\n    return [[0, 0, 0]];\r\n  }\r\n}\r\n\r\nexport function getNewPositions(blockIdx) {\r\n  var newPositions = [];\r\n  var x;\r\n  var y;\r\n  var z;\r\n  for (let i = 0; i < blockIdx.length; i++) {\r\n    for (let j = 0; j < positions.length; j += 3) {\r\n      x = positions[j] + blockIdx[i][0];\r\n      y = positions[j + 1] + blockIdx[i][1];\r\n      z = positions[j + 2] + blockIdx[i][2];\r\n      newPositions.push(x, y, z);\r\n    }\r\n  }\r\n  return newPositions;\r\n}\r\n\r\nexport function getNewIndices(blockIdx) {\r\n  var newIndices = [];\r\n  for (let i = 0; i < blockIdx.length; i++) {\r\n    for (let j = 0; j < indices.length; j++) {\r\n      newIndices.push(indices[j] + (i * positions.length) / 3);\r\n    }\r\n  }\r\n  return newIndices;\r\n}\r\n\r\nexport function getNewVertexCount(blockIdx) {\r\n  return vertexCount * blockIdx.length;\r\n}\r\n","import Cube, {\r\n  positions_length,\r\n  getNewVertexCount,\r\n  getNewPositions,\r\n  getNewIndices\r\n} from \"./cube.js\";\r\n\r\nexport default class FilledSpace extends Cube {\r\n  constructor(color, rainbow) {\r\n    super(color);\r\n    this.rainbow = rainbow;\r\n    this.blockIdx = [];\r\n  }\r\n\r\n  getColors() {\r\n    var colors = [];\r\n    var z;\r\n    for (let i = 0; i < this.blockIdx.length; i++) {\r\n      z = this.blockIdx[i][2];\r\n      for (let j = 0; j < positions_length; j++) {\r\n        colors.push(\r\n          this.rainbow[z][0],\r\n          this.rainbow[z][1],\r\n          this.rainbow[z][2],\r\n          this.rainbow[z][3]\r\n        );\r\n      }\r\n    }\r\n    return colors;\r\n  }\r\n\r\n  update(blockIdx) {\r\n    this.blockIdx = blockIdx;\r\n    this.positions = getNewPositions(this.blockIdx);\r\n    this.indices = getNewIndices(this.blockIdx);\r\n    this.vertexCount = getNewVertexCount(this.blockIdx);\r\n  }\r\n\r\n  getPositions() {\r\n    return this.positions;\r\n  }\r\n  getIndices() {\r\n    return this.indices;\r\n  }\r\n  getVertexCount() {\r\n    return this.vertexCount;\r\n  }\r\n  getBlockIdx() {\r\n    return this.blockIdx;\r\n  }\r\n}\r\n","const { mat4 } = require(\"gl-matrix\");\r\n\r\nconst positions = [\r\n  // Front Top\r\n  0.5,\r\n  0.5,\r\n  0.5,\r\n  -0.5,\r\n  0.5,\r\n  0.5,\r\n\r\n  // Front Bottom\r\n  -0.5,\r\n  -0.5,\r\n  0.5,\r\n  0.5,\r\n  -0.5,\r\n  0.5,\r\n\r\n  // Front Left\r\n  -0.5,\r\n  0.5,\r\n  0.5,\r\n  -0.5,\r\n  -0.5,\r\n  0.5,\r\n\r\n  // Front Right\r\n  0.5,\r\n  -0.5,\r\n  0.5,\r\n  0.5,\r\n  0.5,\r\n  0.5,\r\n\r\n  // Back Top\r\n  -0.5,\r\n  0.5,\r\n  -0.5,\r\n  0.5,\r\n  0.5,\r\n  -0.5,\r\n\r\n  // Back Bottom\r\n  0.5,\r\n  -0.5,\r\n  -0.5,\r\n  -0.5,\r\n  -0.5,\r\n  -0.5,\r\n\r\n  // Back Left\r\n  -0.5,\r\n  -0.5,\r\n  -0.5,\r\n  -0.5,\r\n  0.5,\r\n  -0.5,\r\n\r\n  // Back Right\r\n  0.5,\r\n  0.5,\r\n  -0.5,\r\n  0.5,\r\n  -0.5,\r\n  -0.5,\r\n\r\n  // Top Left\r\n  -0.5,\r\n  0.5,\r\n  -0.5,\r\n  -0.5,\r\n  0.5,\r\n  0.5,\r\n\r\n  // Top Right\r\n  0.5,\r\n  0.5,\r\n  0.5,\r\n  0.5,\r\n  0.5,\r\n  -0.5,\r\n\r\n  // Bottom Left\r\n  -0.5,\r\n  -0.5,\r\n  0.5,\r\n  -0.5,\r\n  -0.5,\r\n  -0.5,\r\n\r\n  // Bottom Right\r\n  0.5,\r\n  -0.5,\r\n  -0.5,\r\n  0.5,\r\n  -0.5,\r\n  0.5\r\n];\r\n\r\n// This array defines each face as two triangles, using the\r\n// indices into the vertex array to specify each triangle's\r\n// position.\r\n\r\nconst indices = [];\r\n\r\nconst vertexCount = 48;\r\n\r\nexport default class LineCube {\r\n  constructor(color) {\r\n    this.color = color;\r\n  }\r\n\r\n  getColors() {\r\n    var colors = [];\r\n    for (let i = 0; i < this.getVertexCount(); i++) {\r\n      colors.push(this.color[0], this.color[1], this.color[2], this.color[3]);\r\n    }\r\n    return colors;\r\n  }\r\n\r\n  linesOnly() {\r\n    return true;\r\n  }\r\n\r\n  getPositions() {\r\n    return positions;\r\n  }\r\n\r\n  getIndices() {\r\n    return indices;\r\n  }\r\n  getVertexCount() {\r\n    return vertexCount;\r\n  }\r\n\r\n  getBlockIdx() {\r\n    return [[0, 0, 0]];\r\n  }\r\n}\r\n\r\nfunction arrayEquals(a, b) {\r\n  return (\r\n    Array.isArray(a) &&\r\n    Array.isArray(b) &&\r\n    a.length === b.length &&\r\n    a.every((val, index) => val === b[index])\r\n  );\r\n}\r\n\r\nexport function getSharedFaces(blockIdx) {\r\n  var sharedLines = {};\r\n  var sharedCount = 0;\r\n  var front;\r\n  var right;\r\n  var top;\r\n  var hasFront;\r\n  var hasTop;\r\n  var hasRight;\r\n  for (let i = 0; i < blockIdx.length; i++) {\r\n    sharedLines[blockIdx[i]] = [];\r\n  }\r\n  for (let i = 0; i < blockIdx.length; i++) {\r\n    front = [blockIdx[i][0], blockIdx[i][1], blockIdx[i][2] + 1];\r\n    top = [blockIdx[i][0], blockIdx[i][1] + 1, blockIdx[i][2]];\r\n    right = [blockIdx[i][0] + 1, blockIdx[i][1], blockIdx[i][2]];\r\n\r\n    hasFront = blockIdx.some((e) => arrayEquals(e, front));\r\n    hasTop = blockIdx.some((e) => arrayEquals(e, top));\r\n    hasRight = blockIdx.some((e) => arrayEquals(e, right));\r\n\r\n    if (hasFront) {\r\n      sharedLines[blockIdx[i]].push(0, 1, 2, 3);\r\n      sharedLines[front].push(4, 5, 6, 7);\r\n      sharedCount += 8;\r\n    }\r\n    if (hasTop) {\r\n      sharedLines[blockIdx[i]].push(0, 4, 8, 9);\r\n      sharedLines[top].push(1, 5, 10, 11);\r\n      sharedCount += 8 - hasFront * 2;\r\n    }\r\n    if (hasRight) {\r\n      sharedLines[blockIdx[i]].push(3, 7, 9, 11);\r\n      sharedLines[right].push(2, 6, 8, 10);\r\n      sharedCount += 8 - hasFront * 2 - hasTop * 2;\r\n    }\r\n  }\r\n  return { sharedCount, sharedLines };\r\n}\r\n\r\nexport function getNewPositions(blockIdx, sharedLines) {\r\n  var newPositions = [];\r\n  var x;\r\n  var y;\r\n  var z;\r\n  var a;\r\n  var b;\r\n  var c;\r\n  for (let i = 0; i < blockIdx.length; i++) {\r\n    for (let j = 0; j < positions.length; j += 6) {\r\n      if (\r\n        sharedLines.length === 0 ||\r\n        !sharedLines[blockIdx[i]].includes(j / 6)\r\n      ) {\r\n        x = positions[j] + blockIdx[i][0];\r\n        y = positions[j + 1] + blockIdx[i][1];\r\n        z = positions[j + 2] + blockIdx[i][2];\r\n        a = positions[j + 3] + blockIdx[i][0];\r\n        b = positions[j + 4] + blockIdx[i][1];\r\n        c = positions[j + 5] + blockIdx[i][2];\r\n        newPositions.push(x, y, z, a, b, c);\r\n      }\r\n    }\r\n  }\r\n  return newPositions;\r\n}\r\n\r\nexport function getNewIndices(blockIdx) {\r\n  return indices;\r\n}\r\n\r\nexport function getNewVertexCount(blockIdx, sharedCount) {\r\n  return vertexCount * blockIdx.length - sharedCount * 2;\r\n}\r\n","import LineCube, {\r\n  getNewVertexCount,\r\n  getNewPositions\r\n} from \"./tetris_blocks/line_cube.js\";\r\n\r\nexport default class LineSpace extends LineCube {\r\n  constructor(color) {\r\n    super(color);\r\n    this.blockIdx = [];\r\n  }\r\n\r\n  update(blockIdx) {\r\n    this.blockIdx = blockIdx;\r\n    this.positions = getNewPositions(this.blockIdx, []);\r\n    this.vertexCount = getNewVertexCount(this.blockIdx, 0);\r\n  }\r\n\r\n  getPositions() {\r\n    return this.positions;\r\n  }\r\n\r\n  getIndices() {\r\n    return;\r\n  }\r\n  getVertexCount() {\r\n    return this.vertexCount;\r\n  }\r\n  getBlockIdx() {\r\n    return this.blockIdx;\r\n  }\r\n}\r\n","// formula from https://www.rapidtables.com/convert/color/hsv-to-rgb.html\r\n\r\nexport default function getRainbow(numColors, value = 1.0, saturation = 1.0) {\r\n  const C = value * saturation;\r\n  var X;\r\n  var H;\r\n  var m;\r\n  var RGB;\r\n  var RGB_list = [];\r\n  if (numColors <= 1) {\r\n    return;\r\n  }\r\n  for (let i = 0; i < numColors; i++) {\r\n    H = (360 / (numColors - 1)) * i;\r\n    X = C * (1 - Math.abs(((H / 60) % 2) - 1));\r\n    m = value - C;\r\n    if (H < 60) {\r\n      RGB = [C, X, 0];\r\n    } else if (H < 120) {\r\n      RGB = [X, C, 0];\r\n    } else if (H < 180) {\r\n      RGB = [0, C, X];\r\n    } else if (H < 240) {\r\n      RGB = [0, X, C];\r\n    } else if (H < 300) {\r\n      RGB = [X, 0, C];\r\n    } else {\r\n      RGB = [C, 0, X];\r\n    }\r\n    RGB_list.push([RGB[0] + m, RGB[1] + m, RGB[2] + m, 1]);\r\n  }\r\n  return RGB_list;\r\n}\r\n","import FilledSpace from \"./filled_space\";\r\nimport LineSpace from \"./line_space\";\r\nimport getRainbow from \"./rainbow\";\r\n\r\nconst { mat4 } = require(\"gl-matrix\");\r\n\r\nexport default class Space {\r\n  constructor(spaceSize) {\r\n    this.spaceSize = spaceSize;\r\n    this.objectOffset = [\r\n      Math.floor(this.spaceSize.x / 2),\r\n      Math.floor(this.spaceSize.y / 2),\r\n      0\r\n    ];\r\n    this.zCube = new Array(spaceSize.z);\r\n    for (let i = 0; i < spaceSize.z; i++) {\r\n      this.zCube[i] = new Array(spaceSize.y);\r\n      for (let j = 0; j < spaceSize.y; j++) {\r\n        this.zCube[i][j] = Array(spaceSize.x).fill(0);\r\n      }\r\n    }\r\n    this.filled = [];\r\n    this.lineSpace = new LineSpace([0, 0, 0, 1]);\r\n    this.filledSpace = new FilledSpace(\r\n      [1, 0, 0, 1],\r\n      getRainbow(this.spaceSize.z)\r\n    );\r\n  }\r\n\r\n  getFilledArray() {\r\n    return this.filled;\r\n  }\r\n\r\n  getPositions() {\r\n    var positions = [];\r\n    for (let i = 0; i < this.spaceSize.x + 1; i++) {\r\n      positions.push(\r\n        i,\r\n        0,\r\n        0,\r\n        i,\r\n        0,\r\n        this.spaceSize.z,\r\n        i,\r\n        this.spaceSize.x,\r\n        0,\r\n        i,\r\n        this.spaceSize.x,\r\n        this.spaceSize.z\r\n      );\r\n    }\r\n    for (let i = 0; i < this.spaceSize.y + 1; i++) {\r\n      positions.push(\r\n        0,\r\n        i,\r\n        0,\r\n        0,\r\n        i,\r\n        this.spaceSize.z,\r\n        this.spaceSize.y,\r\n        i,\r\n        0,\r\n        this.spaceSize.y,\r\n        i,\r\n        this.spaceSize.z\r\n      );\r\n    }\r\n    for (let i = 0; i < this.spaceSize.z + 1; i++) {\r\n      positions.push(\r\n        0,\r\n        0,\r\n        i,\r\n        0,\r\n        this.spaceSize.y,\r\n        i,\r\n        this.spaceSize.x,\r\n        0,\r\n        i,\r\n        this.spaceSize.x,\r\n        this.spaceSize.y,\r\n        i\r\n      );\r\n      positions.push(\r\n        0,\r\n        0,\r\n        i,\r\n        this.spaceSize.x,\r\n        0,\r\n        i,\r\n        0,\r\n        this.spaceSize.y,\r\n        i,\r\n        this.spaceSize.x,\r\n        this.spaceSize.y,\r\n        i\r\n      );\r\n    }\r\n    return positions;\r\n  }\r\n\r\n  getVertexCount() {\r\n    return (\r\n      4 * (this.spaceSize.x + 1) +\r\n      4 * (this.spaceSize.y + 1) +\r\n      8 * (this.spaceSize.z + 1)\r\n    );\r\n  }\r\n\r\n  getColors() {\r\n    var colors = [];\r\n    for (let i = 0; i < this.getVertexCount(); i++) {\r\n      colors.push(0, 0.6, 0, 1);\r\n    }\r\n    return colors;\r\n  }\r\n\r\n  getCentralizeTransform() {\r\n    const transform = mat4.create();\r\n    mat4.translate(transform, transform, [\r\n      -this.spaceSize.x / 2,\r\n      -this.spaceSize.y / 2,\r\n      -0.5\r\n    ]);\r\n    return transform;\r\n  }\r\n\r\n  getCentralizeObjectsTransform() {\r\n    const transform = mat4.create();\r\n    mat4.translate(transform, transform, [\r\n      -this.spaceSize.x / 2 + 0.5,\r\n      -this.spaceSize.y / 2 + 0.5,\r\n      0\r\n    ]);\r\n    return transform;\r\n  }\r\n\r\n  checkSpaceIsFilled(element) {\r\n    if (element[2] < 0) {\r\n      return false;\r\n    } else if (this.zCube[element[2]][element[1]][element[0]]) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  checkIsOutsideSpace(element) {\r\n    return (\r\n      element[0] >= this.spaceSize.x ||\r\n      element[0] < 0 ||\r\n      element[1] >= this.spaceSize.y ||\r\n      element[1] < 0 ||\r\n      element[2] >= this.spaceSize.z\r\n    );\r\n  }\r\n\r\n  objectCanMove(movingObject) {\r\n    return !(\r\n      movingObject.some(this.checkIsOutsideSpace, this) ||\r\n      movingObject.some(this.checkSpaceIsFilled, this)\r\n    );\r\n  }\r\n\r\n  fillSpace(position) {\r\n    this.zCube[position[2] - 1][position[1]][position[0]] = 1;\r\n    this.filled.push([position[0], position[1], position[2] - 1]);\r\n  }\r\n\r\n  removeIfLayerFilled(position) {\r\n    const z = position[2] - 1;\r\n    const isFull = !this.zCube[z].some((row) => row.some((e) => e === 0));\r\n    if (isFull) {\r\n      this.zCube.splice(z, 1);\r\n      this.zCube.unshift(new Array(this.spaceSize.y));\r\n      for (let i = 0; i < this.spaceSize.y; i++) {\r\n        this.zCube[0][i] = Array(this.spaceSize.x).fill(0);\r\n      }\r\n      var offset = 0;\r\n      var length = this.filled.length;\r\n      for (let i = 0; i < length; i++) {\r\n        if (this.filled[i - offset][2] === z) {\r\n          this.filled.splice(i - offset, 1);\r\n          offset += 1;\r\n        } else if (this.filled[i - offset][2] < z) {\r\n          this.filled[i - offset][2] += 1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  add(accumulator, a) {\r\n    return accumulator + a;\r\n  }\r\n\r\n  objectEndMove(movingObject) {\r\n    movingObject.forEach(this.fillSpace, this);\r\n    movingObject.forEach(this.removeIfLayerFilled, this);\r\n  }\r\n\r\n  tryMoveDown(movingObject) {\r\n    if (!this.objectCanMove(movingObject)) {\r\n      this.objectEndMove(movingObject);\r\n      this.lineSpace.update(this.filled);\r\n      this.filledSpace.update(this.filled);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","//\r\n// initBuffers\r\n//\r\n// Initialize the buffers we'll need. For this demo, we just\r\n// have one object -- a simple three-dimensional cube.\r\n//\r\n\r\nexport function initSpaceBuffers(gl, space) {\r\n  const positions = space.getPositions();\r\n  const positionBuffer = gl.createBuffer();\r\n\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n  const vertexCount = space.getVertexCount();\r\n  const colors = space.getColors();\r\n\r\n  const colorBuffer = gl.createBuffer();\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\r\n\r\n  return {\r\n    position: positionBuffer,\r\n    color: colorBuffer,\r\n    vertexCount: vertexCount,\r\n    linesOnly: true\r\n  };\r\n}\r\n\r\nexport default function initObjectBuffers(gl, object) {\r\n  // Create a buffer for the cube's vertex positions.\r\n\r\n  const positionBuffer = gl.createBuffer();\r\n\r\n  // Select the positionBuffer as the one to apply buffer\r\n  // operations to from here out.\r\n\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n  // Now create an array of positions for the cube.\r\n\r\n  // Now pass the list of positions into WebGL to build the\r\n  // shape. We do this by creating a Float32Array from the\r\n  // JavaScript array, then use it to fill the current buffer.\r\n  const positions = object.getPositions();\r\n\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n  const vertexCount = object.getVertexCount();\r\n\r\n  const colorBuffer = gl.createBuffer();\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n  gl.bufferData(\r\n    gl.ARRAY_BUFFER,\r\n    new Float32Array(object.getColors()),\r\n    gl.STATIC_DRAW\r\n  );\r\n\r\n  // Build the element array buffer; this specifies the indices\r\n  // into the vertex arrays for each face's vertices.\r\n\r\n  const indexBuffer = gl.createBuffer();\r\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n\r\n  const indices = object.getIndices();\r\n\r\n  // Now send the element array to GL\r\n\r\n  gl.bufferData(\r\n    gl.ELEMENT_ARRAY_BUFFER,\r\n    new Uint16Array(indices),\r\n    gl.STATIC_DRAW\r\n  );\r\n\r\n  return {\r\n    position: positionBuffer,\r\n    color: colorBuffer,\r\n    indices: indexBuffer,\r\n    vertexCount: vertexCount,\r\n    linesOnly: object.linesOnly()\r\n  };\r\n}\r\n\r\nexport function updateBuffers(gl, buffer, object) {\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer.position);\r\n  const positions = object.getPositions();\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n  const vertexCount = object.getVertexCount();\r\n  buffer.vertexCount = vertexCount;\r\n\r\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer.indices);\r\n  const indices = object.getIndices();\r\n  gl.bufferData(\r\n    gl.ELEMENT_ARRAY_BUFFER,\r\n    new Uint16Array(indices),\r\n    gl.STATIC_DRAW\r\n  );\r\n\r\n  return buffer;\r\n}\r\n","import LineCube, {\r\n  getNewVertexCount,\r\n  getNewPositions,\r\n  getNewIndices,\r\n  getSharedFaces\r\n} from \"./line_cube.js\";\r\n\r\n/* j-block\r\n  ________\r\n |____   |\r\n      |__|\r\n */\r\n\r\nvar jBlockIdx = [\r\n  [0, -1, 0],\r\n  [0, 0, 0],\r\n  [0, 1, 0],\r\n  [1, 1, 0]\r\n];\r\n\r\nconst jBlockShared = getSharedFaces(jBlockIdx);\r\nconst jBlockSharedCount = jBlockShared.sharedCount;\r\nconst jBlockSharedLines = jBlockShared.sharedLines;\r\nconst jBlockPositions = getNewPositions(jBlockIdx, jBlockSharedLines);\r\nconst jBlockIndices = getNewIndices(jBlockIdx);\r\nconst jBlockVertexCount = getNewVertexCount(jBlockIdx, jBlockSharedCount);\r\n\r\nexport default class jBlock extends LineCube {\r\n  getPositions() {\r\n    return jBlockPositions;\r\n  }\r\n  getIndices() {\r\n    return jBlockIndices;\r\n  }\r\n  getVertexCount() {\r\n    return jBlockVertexCount;\r\n  }\r\n  getBlockIdx() {\r\n    return jBlockIdx;\r\n  }\r\n}\r\n","import LineCube, {\r\n  getNewVertexCount,\r\n  getNewPositions,\r\n  getNewIndices,\r\n  getSharedFaces\r\n} from \"./line_cube.js\";\r\n\r\n/* i-block\r\n  _________\r\n |________|\r\n */\r\n\r\nvar iBlockIdx = [\r\n  [0, -2, 0],\r\n  [0, -1, 0],\r\n  [0, 0, 0],\r\n  [0, 1, 0]\r\n];\r\n\r\nconst iBlockShared = getSharedFaces(iBlockIdx);\r\nconst iBlockSharedCount = iBlockShared.sharedCount;\r\nconst iBlockSharedLines = iBlockShared.sharedLines;\r\nconst iBlockPositions = getNewPositions(iBlockIdx, iBlockSharedLines);\r\nconst iBlockIndices = getNewIndices(iBlockIdx);\r\nconst iBlockVertexCount = getNewVertexCount(iBlockIdx, iBlockSharedCount);\r\n\r\nexport default class iBlock extends LineCube {\r\n  getPositions() {\r\n    return iBlockPositions;\r\n  }\r\n  getIndices() {\r\n    return iBlockIndices;\r\n  }\r\n  getVertexCount() {\r\n    return iBlockVertexCount;\r\n  }\r\n  getBlockIdx() {\r\n    return iBlockIdx;\r\n  }\r\n}\r\n","import LineCube, {\r\n  getNewVertexCount,\r\n  getNewPositions,\r\n  getNewIndices,\r\n  getSharedFaces\r\n} from \"./line_cube.js\";\r\n\r\n/* s-block || z-block (same in 3d)\r\n      _____\r\n   __|   __|\r\n  |_____|\r\n */\r\n\r\nvar sBlockIdx = [\r\n  [0, -1, 0],\r\n  [0, 0, 0],\r\n  [1, 0, 0],\r\n  [1, 1, 0]\r\n];\r\nconst sBlockShared = getSharedFaces(sBlockIdx);\r\nconst sBlockSharedCount = sBlockShared.sharedCount;\r\nconst sBlockSharedLines = sBlockShared.sharedLines;\r\nconst sBlockPositions = getNewPositions(sBlockIdx, sBlockSharedLines);\r\nconst sBlockIndices = getNewIndices(sBlockIdx);\r\nconst sBlockVertexCount = getNewVertexCount(sBlockIdx, sBlockSharedCount);\r\n\r\nexport default class sBlock extends LineCube {\r\n  getPositions() {\r\n    return sBlockPositions;\r\n  }\r\n  getIndices() {\r\n    return sBlockIndices;\r\n  }\r\n  getVertexCount() {\r\n    return sBlockVertexCount;\r\n  }\r\n  getBlockIdx() {\r\n    return sBlockIdx;\r\n  }\r\n}\r\n","import LineCube, {\r\n  getNewVertexCount,\r\n  getNewPositions,\r\n  getNewIndices,\r\n  getSharedFaces\r\n} from \"./line_cube.js\";\r\n\r\n/* t-block\r\n  ________\r\n |__    __|\r\n    |__|\r\n */\r\n\r\nvar tBlockIdx = [\r\n  [-1, 0, 0],\r\n  [0, 0, 0],\r\n  [0, 1, 0],\r\n  [1, 0, 0]\r\n];\r\n\r\nconst tBlockShared = getSharedFaces(tBlockIdx);\r\nconst tBlockSharedCount = tBlockShared.sharedCount;\r\nconst tBlockSharedLines = tBlockShared.sharedLines;\r\nconst tBlockPositions = getNewPositions(tBlockIdx, tBlockSharedLines);\r\nconst tBlockIndices = getNewIndices(tBlockIdx);\r\nconst tBlockVertexCount = getNewVertexCount(tBlockIdx, tBlockSharedCount);\r\n\r\nexport default class tBlock extends LineCube {\r\n  getPositions() {\r\n    return tBlockPositions;\r\n  }\r\n  getIndices() {\r\n    return tBlockIndices;\r\n  }\r\n  getVertexCount() {\r\n    return tBlockVertexCount;\r\n  }\r\n  getBlockIdx() {\r\n    return tBlockIdx;\r\n  }\r\n}\r\n","import LineCube, {\r\n  getNewVertexCount,\r\n  getNewPositions,\r\n  getNewIndices,\r\n  getSharedFaces\r\n} from \"./line_cube.js\";\r\n\r\n/* o-block\r\n  ______\r\n |     |\r\n |_____|\r\n */\r\n\r\nvar oBlockIdx = [\r\n  [0, 0, 0],\r\n  [0, 1, 0],\r\n  [1, 0, 0],\r\n  [1, 1, 0]\r\n];\r\n\r\nconst oBlockShared = getSharedFaces(oBlockIdx);\r\nconst oBlockSharedCount = oBlockShared.sharedCount;\r\nconst oBlockSharedLines = oBlockShared.sharedLines;\r\nconst oBlockPositions = getNewPositions(oBlockIdx, oBlockSharedLines);\r\nconst oBlockIndices = getNewIndices(oBlockIdx);\r\nconst oBlockVertexCount = getNewVertexCount(oBlockIdx, oBlockSharedCount);\r\n\r\nexport default class oBlock extends LineCube {\r\n  getPositions() {\r\n    return oBlockPositions;\r\n  }\r\n  getIndices() {\r\n    return oBlockIndices;\r\n  }\r\n  getVertexCount() {\r\n    return oBlockVertexCount;\r\n  }\r\n  getBlockIdx() {\r\n    return oBlockIdx;\r\n  }\r\n}\r\n","import Space from \"./objects/space\";\r\n\r\nimport initObjectBuffers, { initSpaceBuffers } from \"./gl/buffers.js\";\r\nimport jBlock from \"./objects/tetris_blocks/jblock\";\r\nimport iBlock from \"./objects/tetris_blocks/iblock\";\r\nimport sBlock from \"./objects/tetris_blocks/sblock\";\r\nimport tBlock from \"./objects/tetris_blocks/tblock\";\r\nimport oBlock from \"./objects/tetris_blocks/oblock\";\r\n\r\nexport default class World {\r\n  constructor(gl, spaceSize) {\r\n    this.spaceSize = spaceSize;\r\n    this.space = new Space(spaceSize);\r\n    this.gl = gl;\r\n\r\n    // Create the scene objects\r\n    const s_block = new sBlock([1, 1, 1, 1]);\r\n    const t_block = new tBlock([1, 1, 1, 1]);\r\n    const o_block = new oBlock([1, 1, 1, 1]);\r\n    const j_block = new jBlock([1, 1, 1, 1]);\r\n    const i_block = new iBlock([1, 1, 1, 1]);\r\n    this.possibleObjects = [s_block, t_block, o_block, j_block, i_block];\r\n    this.setRandomObject();\r\n\r\n    // Initialize buffers\r\n    this.initBuffers();\r\n  }\r\n  startTimeout() {\r\n    this.timeout = window.setTimeout(this.startTimeout, 3000);\r\n  }\r\n  reset() {\r\n    this.space = new Space(this.spaceSize);\r\n    this.setRandomObject();\r\n    this.initBuffers();\r\n  }\r\n  setRandomObject() {\r\n    this.object = this.possibleObjects[\r\n      Math.floor(Math.random() * this.possibleObjects.length)\r\n    ];\r\n  }\r\n  initBuffers() {\r\n    this.objectBuffers = initObjectBuffers(this.gl, this.object);\r\n    this.spaceBuffers = initSpaceBuffers(this.gl, this.space);\r\n    this.spaceLineBuffers = initObjectBuffers(this.gl, this.space.lineSpace);\r\n    this.spaceFilledBuffers = initObjectBuffers(\r\n      this.gl,\r\n      this.space.filledSpace\r\n    );\r\n  }\r\n}\r\n","import \"./styles.css\";\nimport initShaderProgram from \"./gl/shader.js\";\nimport {\n  updatePerspectiveMatrix,\n  drawObject,\n  clearDrawing\n} from \"./gl/draw.js\";\nimport getTransform, {\n  checkKeyDown,\n  moveDown,\n  getOffsetTransform\n} from \"./key_press\";\n\nimport World from \"./world\";\n\nconst { mat4 } = require(\"gl-matrix\");\n\nfunction main() {\n  const canvas = document.querySelector(\"#glcanvas\");\n  const gl = canvas.getContext(\"webgl\");\n\n  // If we don't have a GL context, give up now\n\n  if (!gl) {\n    alert(\n      \"Unable to initialize WebGL. Your browser or machine may not support it.\"\n    );\n    return;\n  }\n\n  // Initialize a shader program; this is where all the lighting\n  // for the vertices and so forth is established.\n  const shaderProgram = initShaderProgram(gl);\n\n  // Pass the aspect ratio to the draw program\n  const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\n  updatePerspectiveMatrix(aspect);\n\n  // Collect all the info needed to use the shader program.\n  // Look up which attribute our shader program is using\n  // for aVertexPosition and look up uniform locations.\n  const programInfo = {\n    program: shaderProgram,\n    attribLocations: {\n      vertexPosition: gl.getAttribLocation(shaderProgram, \"aVertexPosition\"),\n      vertexColor: gl.getAttribLocation(shaderProgram, \"aVertexColor\")\n    },\n    uniformLocations: {\n      projectionMatrix: gl.getUniformLocation(\n        shaderProgram,\n        \"uProjectionMatrix\"\n      ),\n      modelViewMatrix: gl.getUniformLocation(shaderProgram, \"uModelViewMatrix\"),\n      transformMatrix: gl.getUniformLocation(shaderProgram, \"uTransformMatrix\")\n    }\n  };\n\n  // Create the scene objects\n  const world = new World(gl, { x: 4, y: 4, z: 10 });\n  const offsetTransform = getOffsetTransform(world.spaceSize);\n  const spaceTransform = world.space.getCentralizeTransform();\n  const spaceObjectsTransform = world.space.getCentralizeObjectsTransform();\n\n  // Draw the scene\n  let then = 0;\n\n  window.addEventListener(\"keydown\", (e) => checkKeyDown(e, world));\n\n  // Draw the scene repeatedly\n  var totalTime = 0;\n\n  function render(now) {\n    now *= 0.001; // convert to seconds\n    var deltaTime = now - then;\n    then = now;\n    totalTime += deltaTime;\n\n    if (totalTime > 1) {\n      totalTime = 0;\n      moveDown(world);\n    }\n\n    var transformMatrix = getTransform();\n    mat4.mul(transformMatrix, offsetTransform, transformMatrix);\n\n    clearDrawing(gl, programInfo);\n    drawObject(gl, programInfo, world.spaceBuffers, spaceTransform);\n    drawObject(gl, programInfo, world.objectBuffers, transformMatrix);\n    drawObject(\n      gl,\n      programInfo,\n      world.spaceFilledBuffers,\n      spaceObjectsTransform\n    );\n    drawObject(gl, programInfo, world.spaceLineBuffers, spaceObjectsTransform);\n\n    requestAnimationFrame(render);\n  }\n  requestAnimationFrame(render);\n}\n\nmain();\n"]}